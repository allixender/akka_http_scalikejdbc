akka.http.server {
  parsing {
    max-content-length = 10M
  }
}

akka {
  loglevel = DEBUG
}

blocking-io-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 4
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 16
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

http {
  ip = "0.0.0.0"
  port = 8081
}

# http://scalikejdbc.org/documentation/configuration.html#scalikejdbc-config
db {
  default {
    driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"

    url = "connection-url"
    url = ${?JDBC_URL}

    user = "username"
    user = ${?JDBC_USER}
    password = "password"
    password = ${?JDBC_PASSWORD}

    # Connection Pool settings
    poolInitialSize=4
    poolMaxSize=16
    poolConnectionTimeoutMillis=1000
    poolValidationQuery="select 1 as one"
    poolFactoryName="commons-dbcp2"

    # db.legacy.driver="org.h2.Driver"
    # db.legacy.url="jdbc:h2:file:./db/db2"
    # db.legacy.user="foo"
    # db.legacy.password="bar"

    # MySQL example
    # driver="com.mysql.jdbc.Driver"
    # url="jdbc:mysql://localhost/scalikejdbc"

    # PostgreSQL example
    # driver="org.postgresql.Driver"
    # url="jdbc:postgresql://localhost:5432/scalikejdbc"

  }
}

# Global settings
scalikejdbc.global.loggingSQLAndTime.enabled=true
scalikejdbc.global.loggingSQLAndTime.logLevel=info
scalikejdbc.global.loggingSQLAndTime.warningEnabled=true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis=1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel=warn
scalikejdbc.global.loggingSQLAndTime.singleLineMode=false
scalikejdbc.global.loggingSQLAndTime.printUnprocessedStackTrace=false
scalikejdbc.global.loggingSQLAndTime.stackTraceDepth=10

workdir = "C:\\dev\\build\\akka-http-fluxnet"
workdir = ${?BASE_DIR}

tables {
  all = [ Soontaga_LFdata ],

  Soontaga_LFdata {
    fields = [ P_air_Avg,
      Rain_mm_Tot,
      PAR_reflected_Den_umol_Avg,
      PAR_reflected_Tot_Tot,
      PAR_incoming_Den_umol_Avg,
      PAR_incoming_Tot_Tot,
      Albedo_Net_Avg,
      Rnet_Net_Avg,
      RIL_Net_Avg,
      ROL_Net_Avg,
      RLnet_Net_Avg,
      RIS_Net_Avg,
      ROS_Net_Avg,
      RSnet_Net_Avg,
      RIS_Pyr_Avg,
      ROT_AirTC_Avg,
      ROT_RH_Avg,
      batt_volt_Min,
      batt_volt_Avg,
      PTemp_Avg ],

    P_air_Avg {description: "Air pressure", unitname: "mmHG"},
    Rain_mm_Tot {description: "Rainfall", unitname: "mm"},
    PAR_reflected_Den_umol_Avg {description: "Reflected Photosynthetically Active Radiation (PAR)", unitname: "µmol (photons) m-2 s-1"},
    PAR_reflected_Tot_Tot {description: "Reflected Photosynthetically Active Radiation (PAR)", unitname: "µmol (photons) m-2 s-1"},
    PAR_incoming_Den_umol_Avg {description: "Incoming Photosynthetically Active Radiation (PAR)", unitname: "µmol (photons) m-2 s-1"},
    PAR_incoming_Tot_Tot {description: "Incoming Photosynthetically Active Radiation (PAR)", unitname: "µmol (photons) m-2 s-1"},
    Albedo_Net_Avg {description: "Albedo (calculated)", unitname: "n/"},
    Rnet_Net_Avg {description: "Net Solar radiation (calculated)", unitname: "W/m2"},
    RIL_Net_Avg {description: "Incoming long-wave solar radiation", unitname: "W/m2"},
    ROL_Net_Avg {description: "Outgoing long-wave solar radiation", unitname: "W/m2"},
    RLnet_Net_Avg {description: "Net long-wave solar radiation", unitname: "W/m2"},
    RIS_Net_Avg {description: "Incoming short-wave solar radiation", unitname: "W/m2"},
    ROS_Net_Avg {description: "Outgoing short-wave solar radiation", unitname: "W/m2"},
    RSnet_Net_Avg {description: "Net short-wave solar radiation", unitname: "W/m2"},
    RIS_Pyr_Avg {description: "Short-wave global solar radiation", unitname: "W/m2"},
    ROT_AirTC_Avg {description: "Air temperature", unitname: "°C"},
    ROT_RH_Avg {description: "Air Humidity", unitname: "%"},
    batt_volt_Min {description: "minimal battery voltage", unitname: "V"},
    batt_volt_Avg {description: "average battery voltage", unitname: "V"},
    PTemp_Avg {description: "panel temperature", unitname: "°C"},
  }
}
